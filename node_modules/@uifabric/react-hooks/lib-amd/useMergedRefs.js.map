{"version":3,"file":"useMergedRefs.js","sourceRoot":"../src/","sources":["useMergedRefs.ts"],"names":[],"mappings":";;;IAEA;;;;OAIG;IACH,SAAgB,aAAa;QAAI,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,yBAAiB;;QAChD,IAAM,KAAK,GAAG,cAAM,EAA0B,CAAC;QAE/C,oBAAoB;QACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;QAErB,OAAO,mBAAW,CAAC,UAAC,KAAQ;YAC1B,KAAkB,UAAc,EAAd,KAAA,KAAK,CAAC,OAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;gBAA7B,IAAM,GAAG,SAAA;gBACZ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;oBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;iBACZ;qBAAM,IAAI,GAAG,EAAE;oBACd,qDAAqD;oBACnD,GAAuC,CAAC,OAAO,GAAG,KAAK,CAAC;iBAC3D;aACF;QACH,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAhBD,sCAgBC","sourcesContent":["import { useRef, useCallback, Ref, MutableRefObject } from 'react';\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: Ref<T>[]): (instance: T) => void {\n  const state = useRef<(Ref<T> | undefined)[]>();\n\n  // Update refs list.\n  state.current = refs;\n\n  return useCallback((value: T) => {\n    for (const ref of state.current!) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ((ref as unknown) as MutableRefObject<T>).current = value;\n      }\n    }\n  }, []);\n}\n"]}