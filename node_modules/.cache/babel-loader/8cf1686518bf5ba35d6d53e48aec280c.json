{"ast":null,"code":"import React from'react';import PictureButton from'./../../components/PictureButton.js';import IconButton from'./../../components/IconButton.js';import Carousel from'./../../components/Carousel.js';import'./Spotify.css';import s from'./../../assets/spotify@4x.png';import gen from\"./../../assets/spotify-demos/genres.png\";import pop from\"./../../assets/spotify-demos/popularity.png\";import roc from\"./../../assets/spotify-demos/rhizome_roc.png\";function Spotify(){var image=/*#__PURE__*/React.createElement(\"img\",{class:\"image\",src:s});return/*#__PURE__*/React.createElement(\"div\",{class:\"spotify\"},/*#__PURE__*/React.createElement(\"div\",{class:\"top\",name:\"top\"},/*#__PURE__*/React.createElement(\"div\",{class:\"imageContainer\"},image!=null?image:/*#__PURE__*/React.createElement(\"img\",{class:\"image\",src:image})),/*#__PURE__*/React.createElement(\"p\",{class:\"big-text\"},\" Analytics & Modeling My Listening Habits \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" A project built using Python, Jupyter Notebook, and the Spotify API. \",/*#__PURE__*/React.createElement(\"br\",null),\" Inspired by my data science + ML courses, fueled by my love for music. \")),/*#__PURE__*/React.createElement(\"div\",{class:\"bottom\"},/*#__PURE__*/React.createElement(\"p\",{class:\"spacer\"},\" \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" \",/*#__PURE__*/React.createElement(\"b\",null,\" Exploration \"),\" \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" I first explored which genres I listened to the most by aggregating each genres' appearance in the list of genres corresponding to my top 20 artists. \"),/*#__PURE__*/React.createElement(\"div\",{class:\"imageContainer\"},/*#__PURE__*/React.createElement(\"img\",{className:\"image\",src:gen})),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" I noticed that the API returns a feature called \\\"popularity\\\" for each artist, and have always been a little curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between artist ranking and popularity: \"),/*#__PURE__*/React.createElement(\"div\",{class:\"imageContainer\"},/*#__PURE__*/React.createElement(\"img\",{className:\"image\",src:pop})),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A negative r-value of this magnitude could imply that my more popular artists have higher popularity scores-- a.k.a. a negative correlation between personal preference and artist popularity. \"),/*#__PURE__*/React.createElement(\"p\",{class:\"spacer\"},\" \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" \",/*#__PURE__*/React.createElement(\"b\",null,\" Modeling \"),\" \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that                   the API could return certain features of song tracks, I wanted to see if I could build myself a personalized                   recommendations algorithm using these features and the information that I know about my personal preferences. \"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" The features for each track returned by the API include:\",/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"acousticness\"),/*#__PURE__*/React.createElement(\"li\",null,\"danceability\"),/*#__PURE__*/React.createElement(\"li\",null,\"energy\"),/*#__PURE__*/React.createElement(\"li\",null,\"instrumentalness\"),/*#__PURE__*/React.createElement(\"li\",null,\"key\"),/*#__PURE__*/React.createElement(\"li\",null,\"liveness\"),/*#__PURE__*/React.createElement(\"li\",null,\"loudness\"),/*#__PURE__*/React.createElement(\"li\",null,\"speechiness\"),/*#__PURE__*/React.createElement(\"li\",null,\"tempo\"),/*#__PURE__*/React.createElement(\"li\",null,\"time signature\"),/*#__PURE__*/React.createElement(\"li\",null,\"valence\"))),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike) and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\",/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"one-hot-encoding the \\\"key\\\" column\"),/*#__PURE__*/React.createElement(\"li\",null,\"filling null values\"),/*#__PURE__*/React.createElement(\"li\",null,\"removing time signature as a feature after realizing most values were missing or redundant (i.e. all 4's) or incorrect (i.e. 0)\"))),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\"  Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using scikit-learn. With just these basic features, the model reached:\",/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Training accuracy of 78.47%\"),/*#__PURE__*/React.createElement(\"li\",null,\"Validation accuracy of 71.43%\"))),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" Plotting the ROC curve of the model reveals: \"),/*#__PURE__*/React.createElement(\"div\",{class:\"imageContainer\"},/*#__PURE__*/React.createElement(\"img\",{className:\"image\",src:roc})),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" I also wanted to test how well the model responds to new data, so I created a completely new playlist of 40 songs I've never listened to before and had the model predict 0-1 labels of preference. I listened to the songs and manually labeled them, and then calculated the model's accuracy to be 65%.\"),/*#__PURE__*/React.createElement(\"p\",{class:\"text\"},\" This wasn't as stastically significant as I wanted it to be (p=0.04). Some ideas I have moving forward in the next iteration of this model are to add:\",/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Add genre as a feature\"),/*#__PURE__*/React.createElement(\"li\",null,\"Add artist name as a feature\"),/*#__PURE__*/React.createElement(\"li\",null,\"Add album name as a feature\")))));}export default Spotify;","map":{"version":3,"sources":["/Users/mac/Desktop/projects/izzielau.github.io/src/views/spotify/Spotify.js"],"names":["React","PictureButton","IconButton","Carousel","s","gen","pop","roc","Spotify","image"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,aAAP,KAA0B,qCAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,kCAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gCAArB,CAEA,MAAO,eAAP,CAEA,MAAOC,CAAAA,CAAP,KAAc,+BAAd,CACA,MAAOC,CAAAA,GAAP,KAAgB,yCAAhB,CACA,MAAOC,CAAAA,GAAP,KAAgB,6CAAhB,CACA,MAAOC,CAAAA,GAAP,KAAgB,8CAAhB,CAEA,QAASC,CAAAA,OAAT,EAAmB,CACf,GAAIC,CAAAA,KAAK,cAAG,2BAAK,KAAK,CAAC,OAAX,CAAmB,GAAG,CAAEL,CAAxB,EAAZ,CAEA,mBACI,2BAAK,KAAK,CAAC,SAAX,eACI,2BAAK,KAAK,CAAC,KAAX,CAAiB,IAAI,CAAC,KAAtB,eACI,2BAAK,KAAK,CAAC,gBAAX,EACGK,KAAK,EAAI,IAAT,CAAgBA,KAAhB,cAAwB,2BAAK,KAAK,CAAC,OAAX,CAAmB,GAAG,CAAEA,KAAxB,EAD3B,CADJ,cAII,yBAAG,KAAK,CAAC,UAAT,+CAJJ,cAKI,yBAAG,KAAK,CAAC,MAAT,wFAAsF,8BAAtF,4EALJ,CADJ,cAQI,2BAAK,KAAK,CAAC,QAAX,eACI,yBAAG,KAAK,CAAC,QAAT,MADJ,cAEI,yBAAG,KAAK,CAAC,MAAT,mBAAiB,6CAAjB,KAFJ,cAGI,yBAAG,KAAK,CAAC,MAAT,4JAHJ,cAII,2BAAK,KAAK,CAAC,gBAAX,eACI,2BAAK,SAAS,CAAC,OAAf,CAAuB,GAAG,CAAEJ,GAA5B,EADJ,CAJJ,cAOI,yBAAG,KAAK,CAAC,MAAT,6PAPJ,cAQI,2BAAK,KAAK,CAAC,gBAAX,eACI,2BAAK,SAAS,CAAC,OAAf,CAAuB,GAAG,CAAEC,GAA5B,EADJ,CARJ,cAWI,yBAAG,KAAK,CAAC,MAAT,4SAXJ,cAYI,yBAAG,KAAK,CAAC,QAAT,MAZJ,cAaI,yBAAG,KAAK,CAAC,MAAT,mBAAiB,0CAAjB,KAbJ,cAcI,yBAAG,KAAK,CAAC,MAAT,iXAdJ,cAeI,yBAAG,KAAK,CAAC,MAAT,2EACI,2CACM,6CADN,cAEM,6CAFN,cAGM,uCAHN,cAIM,iDAJN,cAKM,oCALN,cAMM,yCANN,cAOM,yCAPN,cAQM,4CARN,cASM,sCATN,cAUM,+CAVN,cAWM,wCAXN,CADJ,CAfJ,cA8BI,yBAAG,KAAK,CAAC,MAAT,yOACI,2CACE,oEADF,cAEE,oDAFF,cAGE,gKAHF,CADJ,CA9BJ,cAsCI,yBAAG,KAAK,CAAC,MAAT,uLACI,2CACE,4DADF,cAEE,8DAFF,CADJ,CAtCJ,cA4CI,yBAAG,KAAK,CAAC,MAAT,mDA5CJ,cA6CI,2BAAK,KAAK,CAAC,gBAAX,eACI,2BAAK,SAAS,CAAC,OAAf,CAAuB,GAAG,CAAEC,GAA5B,EADJ,CA7CJ,cAgDI,yBAAG,KAAK,CAAC,MAAT,gTAhDJ,cAiDI,yBAAG,KAAK,CAAC,MAAT,yKACI,2CACI,uDADJ,cAEI,6DAFJ,cAGI,4DAHJ,CADJ,CAjDJ,CARJ,CADJ,CAoEH,CAED,cAAeC,CAAAA,OAAf","sourcesContent":["import React from 'react';\n\nimport PictureButton from './../../components/PictureButton.js'\nimport IconButton from './../../components/IconButton.js'\nimport Carousel from './../../components/Carousel.js'\n\nimport './Spotify.css';\n\nimport s from './../../assets/spotify@4x.png';\nimport gen from \"./../../assets/spotify-demos/genres.png\"\nimport pop from \"./../../assets/spotify-demos/popularity.png\"\nimport roc from \"./../../assets/spotify-demos/rhizome_roc.png\"\n\nfunction Spotify() {\n    var image = <img class=\"image\" src={s}></img>;\n\n    return (\n        <div class=\"spotify\">\n            <div class=\"top\" name=\"top\">\n                <div class=\"imageContainer\">\n                  {image != null ? image : <img class=\"image\" src={image}></img>}\n                </div>\n                <p class=\"big-text\"> Analytics & Modeling My Listening Habits </p>\n                <p class=\"text\"> A project built using Python, Jupyter Notebook, and the Spotify API. <br/> Inspired by my data science + ML courses, fueled by my love for music. </p>\n            </div>\n            <div class=\"bottom\">\n                <p class=\"spacer\"> </p>\n                <p class=\"text\"> <b> Exploration </b> </p>\n                <p class=\"text\"> I first explored which genres I listened to the most by aggregating each genres' appearance in the list of genres corresponding to my top 20 artists. </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={gen} />\n                </div>\n                <p class=\"text\"> I noticed that the API returns a feature called \"popularity\" for each artist, and have always been a little curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between artist ranking and popularity: </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={pop} />\n                </div>\n                <p class=\"text\"> With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A negative r-value of this magnitude could imply that my more popular artists have higher popularity scores-- a.k.a. a negative correlation between personal preference and artist popularity. </p>\n                <p class=\"spacer\"> </p>\n                <p class=\"text\"> <b> Modeling </b> </p>\n                <p class=\"text\"> I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that                   the API could return certain features of song tracks, I wanted to see if I could build myself a personalized                   recommendations algorithm using these features and the information that I know about my personal preferences. </p>\n                <p class=\"text\"> The features for each track returned by the API include:\n                    <ul>\n                          <li>acousticness</li>\n                          <li>danceability</li>\n                          <li>energy</li>\n                          <li>instrumentalness</li>\n                          <li>key</li>\n                          <li>liveness</li>\n                          <li>loudness</li>\n                          <li>speechiness</li>\n                          <li>tempo</li>\n                          <li>time signature</li>\n                          <li>valence</li>\n                    </ul>\n                </p>\n                <p class=\"text\"> Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike) and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\n                    <ul>\n                      <li>one-hot-encoding the \"key\" column</li>\n                      <li>filling null values</li>\n                      <li>removing time signature as a feature after realizing most values were missing or redundant (i.e.\n                          all 4's) or incorrect (i.e. 0)</li>\n                    </ul>\n                </p>\n                <p class=\"text\">  Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using scikit-learn. With just these basic features, the model reached:\n                    <ul>\n                      <li>Training accuracy of 78.47%</li>\n                      <li>Validation accuracy of 71.43%</li>\n                    </ul>\n                </p>\n                <p class=\"text\"> Plotting the ROC curve of the model reveals: </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={roc} />\n                </div>\n                <p class=\"text\"> I also wanted to test how well the model responds to new data, so I created a completely new playlist of 40 songs I've never listened to before and had the model predict 0-1 labels of preference. I listened to the songs and manually labeled them, and then calculated the model's accuracy to be 65%.</p>\n                <p class=\"text\"> This wasn't as stastically significant as I wanted it to be (p=0.04). Some ideas I have moving forward in the next iteration of this model are to add:\n                    <ul>\n                        <li>Add genre as a feature</li>\n                        <li>Add artist name as a feature</li>\n                        <li>Add album name as a feature</li>\n                    </ul>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}