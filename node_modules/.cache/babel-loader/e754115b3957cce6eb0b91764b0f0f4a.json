{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projects/izzielau.github.io/src/views/spotify/Spotify.js\";\nimport React from 'react';\nimport IconButton from '../../components/IconButton.js';\nimport Tag from '../../components/Tag.js';\nimport './Spotify.css';\nimport gen from \"./../../assets/spotify-demos/genres.png\";\nimport pop from \"./../../assets/spotify-demos/popularity.png\";\nimport roc from \"./../../assets/spotify-demos/rhizome_roc.png\";\n\nfunction Spotify() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"spotify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    class: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }, \"Spotify\"), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, \"Self-designed project\"), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }, \"A project built using the Spotify API and data from 3 years of listening habits. Inspired by my data science and ML courses, fueled by my love for music.\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tag-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tag, {\n    text: \"Machine Learning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tag, {\n    text: \"Data Science\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tag, {\n    text: \"Software Engineering\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 34\n    }\n  }, \" Exploration \"), \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }, \" I first explored which genres I listened to the most by aggregating each genres' appearance in the list of genres corresponding to my top 20 artists. \"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"imageContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image\",\n    src: gen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/mac/Desktop/projects/izzielau.github.io/src/views/spotify/Spotify.js"],"names":["React","IconButton","Tag","gen","pop","roc","Spotify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,OAAO,eAAP;AAEA,OAAOC,GAAP,MAAgB,yCAAhB;AACA,OAAOC,GAAP,MAAgB,6CAAhB;AACA,OAAOC,GAAP,MAAgB,8CAAhB;;AAEA,SAASC,OAAT,GAAmB;AACf,sBACI;AAAK,IAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,KAAK,EAAC,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAG,IAAA,KAAK,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFJ,eAGI;AAAG,IAAA,KAAK,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iKAHJ,CADJ,eAMI;AAAK,IAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,eAMI;AAAG,IAAA,KAAK,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAjB,MANJ,eAOI;AAAG,IAAA,KAAK,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+JAPJ,eAQI;AAAK,IAAA,KAAK,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,GAAG,EAAEH,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARJ,CANJ,CADJ;AAwEH;;AAED,eAAeG,OAAf","sourcesContent":["import React from 'react';\nimport IconButton from '../../components/IconButton.js'\nimport Tag from '../../components/Tag.js'\nimport './Spotify.css';\n\nimport gen from \"./../../assets/spotify-demos/genres.png\"\nimport pop from \"./../../assets/spotify-demos/popularity.png\"\nimport roc from \"./../../assets/spotify-demos/rhizome_roc.png\"\n\nfunction Spotify() {\n    return (\n        <div class=\"spotify\">\n            <div class=\"heading\">\n                <p class=\"title\">Spotify</p>\n                <p class=\"subtitle\">Self-designed project</p>\n                <p class=\"subtitle\">A project built using the Spotify API and data from 3 years of listening habits. Inspired by my data science and ML courses, fueled by my love for music.</p>\n            </div>\n            <div class=\"content\">\n                <div class=\"tag-row\">\n                    <Tag text=\"Machine Learning\"></Tag>\n                    <Tag text=\"Data Science\"></Tag>\n                    <Tag text=\"Software Engineering\"></Tag>\n                </div>\n                <p class=\"text\"> <b> Exploration </b> </p>\n                <p class=\"text\"> I first explored which genres I listened to the most by aggregating each genres' appearance in the list of genres corresponding to my top 20 artists. </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={gen} />\n                </div>\n                {/*\n                <p class=\"text\"> I noticed that the API returns a feature called \"popularity\" for each artist, and have always been a little curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between artist ranking and popularity: </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={pop} />\n                </div>\n                <p class=\"text\"> With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A negative r-value of this magnitude could imply that my more popular artists have higher popularity scores-- a.k.a. a negative correlation between personal preference and artist popularity. </p>\n                <p class=\"text\"> <b> Modeling </b> </p>\n                <p class=\"text\"> I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that the API could return certain features of song tracks, I wanted to see if I could build myself a personalized                   recommendations algorithm using these features and the information that I know about my personal preferences. </p>\n                <p class=\"text\"> The features for each track returned by the API include:\n                    <ul>\n                          <li>acousticness</li>\n                          <li>danceability</li>\n                          <li>energy</li>\n                          <li>instrumentalness</li>\n                          <li>key</li>\n                          <li>liveness</li>\n                          <li>loudness</li>\n                          <li>speechiness</li>\n                          <li>tempo</li>\n                          <li>time signature</li>\n                          <li>valence</li>\n                    </ul>\n                </p>\n                <p class=\"text\"> Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike) and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\n                    <ul>\n                      <li>one-hot-encoding the \"key\" column</li>\n                      <li>filling null values</li>\n                      <li>removing time signature as a feature after realizing most values were missing or redundant (i.e.\n                          all 4's) or incorrect (i.e. 0)</li>\n                    </ul>\n                </p>\n                <p class=\"text\">  Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using scikit-learn. With just these basic features, the model reached:\n                    <ul>\n                      <li>Training accuracy of 78.47%</li>\n                      <li>Validation accuracy of 71.43%</li>\n                    </ul>\n                </p>\n                <p class=\"text\"> Plotting the ROC curve of the model reveals: </p>\n                <div class=\"imageContainer\">\n                    <img className=\"image\" src={roc} />\n                </div>\n                <p class=\"text\"> I also wanted to test how well the model responds to new data, so I created a completely new playlist of 40 songs I've never listened to before as a test set. After I listened to the songs and manually labeled them as gold labels, i then calculated the model's accuracy on the test dataset to be 65%.</p>\n                <p class=\"text\"> This was not a statistically significant result (p=0.04), but the API was fun to implement and showed some promising results! Some ideas I have moving forward in the next iteration of this model are to add:\n                    <ul>\n                        <li>Add genre as a feature</li>\n                        <li>Add artist name as a feature</li>\n                        <li>Add album name as a feature</li>\n                        <li>Incorporate other APIs for more external information</li>\n                    </ul>\n                </p>\n                */}\n            </div>\n        </div>\n    );\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}